"""
Every character classes inherit from the :class:`Character()` defined below.

--

Author : DrLarck

Last update : 15/07/19
"""

# dependancies
import asyncio

# character class
class Character:
    """
    Every character classes inherit from this one.

    Defines what a character is and all the possible interaction you can have with it.

    - Parameter :

    - Attribute : 

    - Method :
    """

    # attribute
    def __init__(self):
        # basic info
        self.info = {
            "id" : 0,
            "name" : None,
            "image" : None,
            "thumb" : None,
            "saga" : None,
            "type" : {
                "icon" : None,
                "value" : 0
            },
            "rarity" : {
                "icon" : None,
                "value" : 0
            }
        }

        # characteristics
        self.level = 0

        # represent the character's posture
        # if all the postures are set to False it means that the character is
        # attacking
        # default : "attacking" = True
        self.posture = {
            "attacking" : True,
            "defending" : False,
            "charging" : False,
            "stunned" : False,
            # if "ghost" = True, the character cannot be resurrected
            "ghost" : False,
        }

        # if the current health reaches 0, the character dies
        self.health = {
            "maximum" : 0,
            "current" : 0
        }

        # by default the maximum ki is 100
        self.ki = {
            "maximum" : 100,
            "current" : 0
        }

        # 2 types of damage : Physical and Ki one
        self.damage = {
            "physical" : {
                "maximum" : 0,
                "minimum" : 0
            },
            "ki" : {
                "maximum" : 0,
                "minimum" : 0
            }
        }

        # the critical values are in %
        self.critical = {
            "chance" : 0,
            "bonus" : 0
        }

        # 2 types of defense : Physical and Ki, repectively "Armor" and "Spirit"
        # the "reduction" key value is in % as well as "parry" and "dodge"
        self.defense = {
            "armor" : 0,
            "spirit" : 0,
            "dodge" : 0,
            "parry" : 0,
            "reduction" : 0
        }

        # represents the stats that are generated by the character at each turn
        self.regeneration = {
            "health" : 0,
            "ki" : 0
        }

            # bonus stat
            # used for the stats calculation
            # each value represent an amount of item used
            # basically the player won't be able to use more than
            # 10 training items
        self.enhancement = {
            "star" : 0,
            "training" : {
                "defense" : {
                    "health" : 0,
                    "armor" : 0,
                    "spirit" : 0
                },
                "damage" : {
                    "physical" : 0,
                    "ki" : 0
                }
            }
        }

        # effect
        # list of effects
        self.effect = {
            "bonus" : [],
            "malus" : []
        }

        # ability
        # list of abilities
        self.ability = {
            "ability" : [],
            "passive" : [],
            "leader" : []
        }
        
    #####################
    # method
        # init
    async def init(self):
        """
        `coroutine`

        Initializes the character by : 
        - Translating its name
        - Setting up its characteristics

        --

        Return : None
        """

        return
    
    async def set_stat(self):
        """
        `coroutine`

        Initializes the character's stats.

        --

        Return : None
        """

        return
    
    async def receive_damage(self):
        """
        `coroutine`

        Applies the received damages.

        --

        Return : None
        """

        return
    
    # ability
    async def use_ability(self):
        """
        `coroutine`

        Uses the passed ability.

        --

        Return : None
        """

        return
        
        # triggers
    async def trigger_passive(self):
        """
        `coroutine`

        Triggers all the passive skills.

        --

        Return : None
        """

        # init
        passive = self.ability["passive"]

        if(len(passive) > 0):  # if there is some passive skills in it
            for _passive in passive:  # triggers the effects one by one
                await asyncio.sleep(0)

                await _passive.trigger()
        
        else:  # if the passive list is empty we return
            return
        
        return
    
    async def trigger_leader(self):
        """
        `coroutine`

        Triggers all the leader skills.

        --

        Return : None
        """

        # init
        leader = self.ability["leader"]

        if(len(leader) > 0):
            for _leader in leader:
                await asyncio.sleep(0)

                await _leader.trigger()
        
        else:
            return
        
        return
    
        # artificial intelligence
    async def bot(self):
        """
        `coroutine`

        Defines the character gameplay. The bot will play as defined in this method.

        --

        Return : None
        """

        return